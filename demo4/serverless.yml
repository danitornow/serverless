# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-demo # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: ruby2.5

# you can overwrite defaults here
  stage: ${opt:stage, "tuesday"}
  region: us-east-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    REGION: ${opt:region, self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  create:
    handler: lib/create.Create.handler
    events:
      - http:
          path: create
          method: post
          cors: true

  update:
    handler: lib/update.Update.handler
    events:
      - http:
          path: update/{uuid}
          method: put
          cors: true

  delete:
    handler: lib/delete.Delete.handler
    events:
      - http:
          path: delete/{uuid}
          method: delete
          cors: true

  list:
    handler: lib/list.List.handler
    events:
      - http:
          path: list
          method: get
          cors: true

  get:
    handler: lib/get.Get.handler
    events:
      - http:
          path: list/{id}
          method: get
          cors: true

  authorizer:
    handler: lib/authorizer.Authorizer.authorizer_function
#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    DemoDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
